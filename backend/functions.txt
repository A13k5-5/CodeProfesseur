classroom route functions:

I) get_questions - displays questions for students and teachers, with three options
    1 - all questions for a specific teacher. JSON is question name and success rate for each question
    2 - all questions for a specific classroom. JSON is question name and success rate for each question
    3 - all questions for a specific student in a specific classroom. JSON is question name, number of
    submissions and due date for each question

II) get_classroom_students

For both teacher_route and classroom_route - get_questions_function - student_view, should maybe check if the user exists, otherwise
people could hardcode into the url a user that doesn't exist


teacher
get all their questions, submissions percentage success


                # # Get the latest submission's is_accepted value
                # latest_submission = conn.execute('''
                #     SELECT is_accepted, date
                #     FROM submission
                #     WHERE question = ? AND user = ?
                #     ORDER BY date DESC
                #     LIMIT 1
                # ''', (question['question_id'], student_id)).fetchone()
                
                # latest_attempt_accepted = None
                # latest_attempt_date = None
                
                # if latest_submission:
                #     latest_attempt_accepted = latest_submission['is_accepted']
                #     latest_attempt_date = latest_submission['date']



HASHLIB
hashlib.sha256(password.encode()).hexdigest()
This line performs a SHA-256 hash on a password and returns a hexadecimal string representation.

password.encode():
password is assumed to be a Python string
.encode() converts this string to bytes using UTF-8 encoding (by default)
This conversion is necessary because cryptographic hash functions operate on bytes, not strings
Example: "hello" becomes b"hello"


hashlib.sha256(...):
hashlib is Python's standard library for cryptographic hashing
sha256() creates a hash object that implements the SHA-256 algorithm
The function takes the bytes from password.encode() as input
SHA-256 produces a 256-bit (32-byte) hash value
This is a one-way function - you cannot derive the original password from the hash


.hexdigest():
This method returns the hash value as a hexadecimal string
Each byte is represented as two hex digits
The resulting string is always 64 characters long (32 bytes × 2 characters per byte)


HMAC - a mechanism for message authentication using cryptographic hash functions
 hmac.compare_digest(a, b)¶
    Return a == b. 
This function uses an approach designed to prevent timing analysis by avoiding content-based 
short circuiting behaviour, making it appropriate for cryptography. a and b must both be of the same type

timing attack:
By analyzing these response times, an attacker can indirectly gather information leaked by the application. 
This technique can be used for malicious purposes, such as guessing a user's password or breaking encryption methods. 
Side-channel attacks exploit unintended information leakage from a system